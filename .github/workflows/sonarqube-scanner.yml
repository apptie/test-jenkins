name: PR 코드 분석

on:
  pull_request:
    types: [opened, reopened]
    branches:
      - main

permissions: write-all

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: settings java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: cache gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: chmod gradle
        run: chmod +x gradlew

      - name: run test
        run: ./gradlew --info test

      - name: run sonarqube scanner for analytics
        run: ./gradlew sonarqube

      - name: SonarQube Quality Check
        id: sonar-quality
        run: |
          SONAR_PROJECT_KEY="sonarqube-test" 
          SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"

          RESULT=$(curl -s -u "admin:root" "${{ secrets.SONAR_URL }}/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}&pullRequest=${{github.event.number}}")
          STATUS=$(echo "$RESULT" | jq -r '.projectStatus.status')
          ERROR_METRIC_KEYS=$(echo "$RESULT" | jq -r '.projectStatus.conditions[] | select(.status == "ERROR").metricKey')
          
          echo "STATUS=${STATUS}" >> $GITHUB_OUTPUT
          echo "ERROR_METRIC_KEYS=${ERROR_METRIC_KEYS}" >> $GITHUB_OUTPUT

      - name: slack test
        run: |
          GIT_ID=${{ github.event.pull_request.user.login }}
          SLACK_DATA='{ "text": "PR 브랜치 분석", "blocks": [ { "type": "section", "text": {"type":"mrkdwn","text": "'
          
          if [ "$GIT_ID" == "apptie" ]; then
            SLACK_DATA+="<${{ secrets.apptie }}>"
          fi
          SLACK_DATA+='" }}]}'
          
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} -d "${SLACK_DATA}"
