name: PR 코드 분석

on:
  pull_request:
    types: [opened, reopened]
    branches:
      - main

permissions: write-all

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: settings java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: cache gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: chmod gradle
        run: chmod +x gradlew

      - name: run test
        run: ./gradlew --info test

      - name: Run an analysis of the ${{ github.REF }} branch ${{ github.BASE_REF }} base
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
        with:
          args: >
            -Dsonar.issuesReport.console.enable=true 
            -Dsonar.projectKey=sonarqube-test
            -Dsonar.java.libraries= 
            -Dsonar.java.libraries.empty=true 
            -Dsonar.java.binaries=build/classes
            -Dsonar.sources=src/main/java
            -Dsonar.tests=src/test/java
            -Dsonar.test.inclusions=**/*Test.java 
            -Dsonar.exclusions=**/*Application** 
            -Dsonar.sourceEncoding=UTF-8 
            -Dsonar.java.coveragePlugin=jacoco 
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/jacocoTestReport.xml

      - name: SonarQube Quality Check
        id: sonar-quality
        run: |
          SONAR_PROJECT_KEY="sonarqube-test" 
          SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"

          RESULT=$(curl -s -u "admin:root" "${{ secrets.SONAR_URL }}/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}&pullRequest=${{github.event.number}}")
          STATUS=$(echo "$RESULT" | jq -r '.projectStatus.status')
          ERROR_METRIC_KEYS=$(echo "$RESULT" | jq -r '.projectStatus.conditions[] | select(.status == "ERROR").metricKey')
          
          echo "STATUS=${STATUS}" >> $GITHUB_OUTPUT
          echo "ERROR_METRIC_KEYS=${ERROR_METRIC_KEYS}" >> $GITHUB_OUTPUT

      - name: set variables
        id: variables
        run: |
          GIT_ID=${{ github.event.pull_request.user.login }}
          
          if [ "$GIT_ID" == "apptie" ]; then
            AUTHOR="${{ secrets.apptie_display_name }}"
          elif [ "$GIT_ID" == "apptie" ]; then
            AUTHOR="${{ secrets.apptie_display_name }}"
          fi
          
          SONAR_SCANNER_URL="${{ secrets.SONAR_URL }}/dashboard?id=sonarqube-test&pullRequest=${{github.event.number}}"
          
          REVIEWER=mapfile -t targets < <(jq -r '.requested_reviewers[].login' <<< "${{ toJson(github.event.pull_request) }}")
          REVIEWERS="" 
          for target in "${targets[@]}"; do
            echo "target : $target"
            if [ "$target" == "lognitude" ]; then
              echo "target : $target"
              reviewers+="<@${{ secrets.apptie }}> "
            fi
          done
          
          echo "AUTHOR=${AUTHOR}" >> $GITHUB_OUTPUT
          echo "SONAR_SCANNER_URL=${SONAR_SCANNER_URL}" >> $GITHUB_OUTPUT
          echo "REVIEWERS=${REVIEWERS}" >> $GITHUB_OUTPUT

      - name: slack test
        run: |
          SLACK_MESSAGE='{"text":"PR 브랜치 분석","blocks":[{"type":"section","text":{"type":"mrkdwn","text":">*PR 브랜치 분석* \n>\n>*PR Author*\n>'
          SLACK_MESSAGE+="${{ steps.variables.outputs.AUTHOR }}"
          SLACK_MESSAGE+="\n>\n>*PR 링크*\n><"
          SLACK_MESSAGE+="${{ github.event.pull_request.html_url }} "  
          SLACK_MESSAGE+=">\n>\n>*분석 대시보드*\n><"
          SLACK_MESSAGE+="${{ steps.variables.outputs.SONAR_SCANNER_URL }}"
          SLACK_MESSAGE+="> \n>\n>분석 결과\n>" 
          SLACK_MESSAGE+=":white_check_mark:"  
          SLACK_MESSAGE+="\n>\n>*리뷰어*\n>"  
          SLACK_MESSAGE+="${{ steps.variables.outputs.REVIEWERS }}"  
          SLACK_MESSAGE+='"}}]}'
          
        
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} -d "${SLACK_MESSAGE}"
